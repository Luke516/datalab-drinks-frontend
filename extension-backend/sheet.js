const { GoogleSpreadsheet } = require('google-spreadsheet');
require('dotenv').config();

const fetchParticipantRowsFromSheet = async () => {
    // Initialize the sheet - doc ID is the long id in the sheets URL
    const doc = new GoogleSpreadsheet('1ToMPNpYRIwRGqlOdxpv0aCbWWuVUFRzSV_ZdPVIEXtc');

    console.log(process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL);
    console.log(process.env.GOOGLE_PRIVATE_KEY);
    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/gm, '\n'),
    });

    await doc.loadInfo(); // loads document properties and worksheets
    console.log(doc.title);
    // await doc.updateProperties({ title: 'renamed doc' });

    const sheet = doc.sheetsByIndex[7]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    if(sheet.title !== "整理名單") {
        return {};
    }
    console.log(sheet.title);
    await sheet.loadHeaderRow();
    let headerValues = sheet.headerValues;
    // console.log(sheet.headerValues);
    // console.log(sheet.rowCount);
    // console.log(sheet.columnCount);

    let rows = await sheet.getRows();
    // console.log(rows);

    // adding / removing sheets
    // const newSheet = await doc.addSheet({ title: 'hot new sheet!' });
    // await newSheet.delete();
    return {
        headerValues,
        rows
    };
}

const fetchParticipantGroupsFromSheet = async () => {
    // Initialize the sheet - doc ID is the long id in the sheets URL
    const doc = new GoogleSpreadsheet('1ToMPNpYRIwRGqlOdxpv0aCbWWuVUFRzSV_ZdPVIEXtc');

    console.log(process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL);
    console.log(process.env.GOOGLE_PRIVATE_KEY);
    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/gm, '\n'),
    });

    await doc.loadInfo(); // loads document properties and worksheets
    console.log(doc.title);
    // await doc.updateProperties({ title: 'renamed doc' });

    const sheet = doc.sheetsByIndex[1]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    if(sheet.title !== "帳號建立") {
        return {};
    }
    console.log(sheet.title);
    await sheet.loadHeaderRow();
    let headerValues = sheet.headerValues;
    // console.log(sheet.headerValues);
    // console.log(sheet.rowCount);
    // console.log(sheet.columnCount);

    let rows = await sheet.getRows();
    // console.log(rows);

    // adding / removing sheets
    // const newSheet = await doc.addSheet({ title: 'hot new sheet!' });
    // await newSheet.delete();
    return {
        headerValues,
        rows
    };
}

module.exports = { fetchParticipantRowsFromSheet, fetchParticipantGroupsFromSheet };